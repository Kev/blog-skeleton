#!/usr/bin/env ruby

require 'digest'

################################################################################
# Preprocessing
################################################################################

preprocess do
	# Everything in my blog/ dir is an article.
	# Derive the date from the filename (for Jekyll-style post naming)
	@items.each do |item|
		if /\/blog\/[^\/]*\/$/.match(item.identifier)
			item[:kind] = "article"
			item[:layout] = "post"
			item[:comments] = true
			item[:custom_url_in_feed] = item[:link] if item[:link]
			if not item[:created_at] and m = /blog\/(\d{4}-\d{2}-\d{2})/.match(item.identifier)
				item[:created_at] = m[1]
			end
		end
	end

	# Create paginated article pages (including front page)
	articles_to_paginate = sorted_articles
	article_groups = []
	until articles_to_paginate.empty?
		article_groups << articles_to_paginate.slice!(0..@config[:page_size]-1)
	end
	article_groups.each_with_index do |subarticles, i|
		first = i*config[:page_size] + 1
		last = (i+1)*config[:page_size]
		if i == 0
			title = "#{@config[:site_title]} | #{@config[:site_subtitle]}"
			id = "/"
		else
			title = "Archive (posts #{first} to #{last})"
			id = "/blog/page#{i+1}"
		end
		items << Nanoc::Item.new("<%= render 'blog_page', :item_id => #{i} %>", { 
			:title => title, 
			:created_at => DateTime.now, 
			:paged => true, 
			:kind => "article_list",
			:body_classes => ["blog"]
		}, id)
	end

	# Add top feed to all items
	@items.each { |item| item[:feed] = (item[:feed] || "/feed.xml") }

	# Add tag pages (and their feed)
	all_article_tags.each do |name|
		path = "/blog/tag/#{slugify(name)}"
		articles = "articles_with_tag(\"#{name}\")"
		attributes = {
			:title => "Tag: #{name}",
			:created_at => DateTime.now,
			:kind => "article_list",
			:feed => "/feed.xml",
			:body_classes => ["archive", "tag"]
		}

		# Add feed for specific topics
		if %w(xmpp jabber).include?(name.downcase)
			attributes[:feed] = "#{path}/feed.xml"
			items << Nanoc::Item.new("<%= atom_feed :title => \"#{@config[:site_title]} | #{name}\", :author_name => @config[:author_name], :author_uri => @config[:author_uri], :articles => #{articles}, :content_proc => lambda { |a| a.rep_named(:linked_excerpt).compiled_content }, :limit => 10 %>", {:kind => "feed"}, "#{path}/feed")
		end

		items << Nanoc::Item.new("<%= render 'archive_page', :posts => #{articles} %>", attributes, "#{path}")
	end

	# Hide some items
	@items.each { |item| item[:is_hidden] = true if %r<^/google\w{16}/>.match(item.identifier) }
end


################################################################################
# XML files (Feeds, Sitemap)
################################################################################

xml = %r</(feed/.*)|^/sitemap/>

compile xml do
	filter :erb
	filter :git_link_filter
end

route xml do
	item.identifier.chop + '.xml'
end


################################################################################
# Blog
################################################################################

# Excerpts with a "Read More ..." link
compile '/blog/*', :rep => :linked_excerpt do
	unless item.binary?
		if item[:extension] == "md" or item[:extension] == "markdown"
			filter :rdiscount, :extensions => [:smart]
		end
		filter :more_filter, :more_url => item.path
		filter :git_link_filter
	end
end

route '/blog/*', :rep => :linked_excerpt do
end

route '/blog/*' do
	if item[:link]
		nil
	elsif item.binary? or item.identifier.end_with? "index"
		item.identifier.chop + '.' + item[:extension]
	else
		item.identifier.gsub(/\d\d\d\d-\d\d-\d\d-/, '') + 'index.html'
	end
end


################################################################################
# Git
################################################################################

# Create a representation for only the top and only the bottom of a dummy page.
# These will be included by CGit as header/footers.
compile '/git', :rep => :top do
	layout 'default'
	filter :split_filter, :delimiter => "<!-- CONTENT -->", :keep => :top
end

compile '/git', :rep => :bottom do
	layout 'default'
	filter :split_filter, :delimiter => "<!-- CONTENT -->", :keep => :bottom
end

route '/git', :rep => :top do
	item.identifier + 'top.html'
end

route '/git', :rep => :bottom do
	item.identifier + 'bottom.html'
end


################################################################################
# Avatar
################################################################################

# Libravatar avatars
@config[:avatars][:email].each do |avatar|
	compile "/avatar", :rep => avatar + "_sha256" do end
	route "/avatar", :rep => avatar + "_sha256" do
		"/avatar/" + Digest::SHA256.hexdigest(avatar.strip.downcase)
	end

	compile "/avatar", :rep => avatar + "_md5" do end
	route "/avatar", :rep => avatar + "_md5" do
		"/avatar/" + Digest::MD5.hexdigest(avatar.strip.downcase)
	end
end

@config[:avatars][:openid].each do |avatar|
	compile "/avatar", :rep => avatar do end
	route "/avatar", :rep => avatar do
		"/avatar/" + Digest::SHA256.hexdigest(avatar.strip.downcase)
	end
end

# Simple avatar
route "/avatar" do 
	"/avatar/avatar.jpg"
end


################################################################################
# Files that don't need processing
################################################################################

route '/static/favicon/*' do
	item.identifier[(7+8)..-2]
end

route '/static/*' do
	item.identifier[7..-2]
end

compile '/static/*' do
end

################################################################################
# Default handling
################################################################################

compile '*' do
	unless item.binary? or item[:link]
		filter :erb
		if item[:extension] == "md" or item[:extension] == "markdown"
			filter :rdiscount, :extensions => [:smart]
		end
		snapshot :filtered_contents
		filter :colorize_syntax, :coderay => { :tab_width => 2 }, :syntax => :html
		if item[:layout] 
			layout item[:layout]
		end
		layout 'default' unless item[:no_default_layout] 
		filter :more_filter, :mode => :replace
		filter :git_link_filter
	end
end

route '*' do
	if item.binary? or item.identifier.end_with? "index"
		item.identifier.chop + '.' + item[:extension]
	else
		# Write item with identifier /foo/ to /foo/index.html
		item.identifier + 'index.html'
	end
end

layout 'include/disqus', :erb
layout '*', :haml
